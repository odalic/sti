####################
#	FILE PATHS 	   #
####################
# STI home folder. All other file paths wil be relative to this (except otherwise stated). 
sti.home=d:\\Documents\\Odalic\\Sti\\
# Folder containing nlp resources (by default this is the '/resource' folder in the distribution)
sti.nlp=resources
# Folder containing cached data (must be ABSOLUTE PATH). Whenever KB search or Web search is performed, the query and results are cached in a Solr instance. This specifies the path to Solr. (by default this is the /cache/empty folder in the distribution. The folder contains only solr schemas, but no data. This means you can use them directly as long as you correct the path. And the system will begin with remotely querying KB or the Web and gradually builds up the cache). 
sti.cache.main.dir=d:\\Documents\\Odalic\\Cache\\
# Web search configuration file. By default this is located in the home folder of the distribution
sti.websearch.properties=config\\websearch.properties
# KB search configuration file. By default this is located in the home folder of the distribution.
# Multiple configuration files can be separated by the "|"
sti.kbproxy.propertyfile=config\\DBPediaSearch.properties|config\\DBPediaCloneSearch.properties|config\\GermanDBPediaSearch.properties
# When STI is run in batch mode (e.g., processing a folder containing multiple input files, by using an instance of uk.ac.shef.dcs.sti.experiment.STIBatch), it loads in all files and sort them by file name. If for any input file the process failed due to any exception, the indexes of such files (as index of the file in the sorted list) are written to this provided file. 
sti.list.failure=failed.txt
# Input files must be parsed to create an internal uk.ac.shef.dcs.sti.core.model.Table objects. Depending on the input data files, specific TableParser class must be implemented and specified here. The class must have a defult constructor that does not take any arguments
sti.input.parser.class=uk.ac.shef.dcs.sti.parser.table.TableParserLimayeDataset


####################################
#	SELECTIVE START (generic)	   #
####################################
# STI tries to classify the data type of table columns, and typically only certain types of columns are passed for interpretation. While this process is highly accurate, it is not guaranteed to be perfect so in some occassions it is possible to have, e.g., NE-columns mis-classified as numeric, or long text. Therefore, for all input tables, if you know some columns should not be considered for interpretation, specify them here as a comma delimieted string. E.g, '0,1,5' will tell STI to ignore the first, 2nd and 6th columns in input tables.
sti.columns.ignore=
# Similar as the above, if you know some columns must be analyzed, you can provide their index here
sti.columns.mustdo=


################################
#	SELECTIVE START (batch)	   #
################################
# when running in batch mode, instead of always processing the entire input folder, starting from the first file, it is possible to make the process selective by defining the following parameters

# Given the input files read from a folder sorted by their file names, you can choose to start from a particular index position in the sorted list. The first file's index is 0. This is useful when, e.g., the previously process broke down and you want to continue from a particular position. The index position of each processed input file will be output in the log file
sti.start=0
# Similar as above, you can provide a list of indexes representing the files you want to process. Note that if this variable is defined, ONLY THESE SPECIFIED files will be processed. This variable must be an absolute file path pointing to a plain text file, where each line is the index of a file in the sorted input folder. Leave this variable empty if you do not want to be selective
sti.list.select=


################################################
#	Subject column detection, the ws scorer	   #
################################################

# Whether STI should use the ws score in detecting subject column
sti.subjectcolumndetection.ws=true
# If ws is used, what stopping criteria class should be used
sti.iinf.websearch.stopping.class=uk.ac.shef.dcs.sti.core.algorithm.tmp.stopping.IInf
# if ws is used, for the stopping criteria class provided above, also provide its contructor parameters in the order it is defined in the class, delimited by ,
sti.iinf.websearch.stopping.class.constructor.params=0.0,1,0.01


########################
# RELATION ENUMERATION #
########################
# Choose whether or not STI should annotate relations
sti.learning.relation=true


##########
# OUTPUT #
##########

# Prefix mapping configuration for the resources provided to the clients.
cz.cuni.mff.xrg.odalic.prefixes=config\\PrefixMapping.ttl

# What is the namespace that the KB uses
sti.output.triple.namespace.kb=www.freebase.org
# What is the namespace to use for newly extracted classes, relations and entities that are not available in the KB
sti.output.triple.namespace.default=www.shef.ac.uk


#############################################################
# TABLEMINER+: LEARNING (only needed if you run tableminer+ #
#############################################################
# What stopping criteria class should be used in the iinf for preliminary column classification
sti.tmp.iinf.learning.stopping.class=uk.ac.shef.dcs.sti.core.algorithm.tmp.stopping.IInf
# for the stopping criteria class provided above, also provide its contructor parameters in the order it is defined in the class values separated by ,
sti.tmp.iinf.learning.stopping.class.constructor.params=0.0,1,0.05


########
# MAIL #
########

# SMTP server user name
mail.username=odalic@email.cz
# SMTP server password
mail.password=8fzPC8jU6anjVD4Ln8GwCGdN
# E-mails sent from?
mail.from=odalic@email.cz

# SMTP host
mail.smtp.host=smtp.seznam.cz
# SMTP socket factory port
mail.smtp.socketFactory.port=465
# Socket factory
mail.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory
# Authorization enabled?
mail.smtp.auth=true
# SMTP port
mail.smtp.port=465

#########
# USERS #
#########

# Maximum temporary codes kept per queue
cz.cuni.mff.xrg.odalic.users.maximumCodesKept=100

# Maximum hours that a single session can last
cz.cuni.mff.xrg.odalic.users.session.maximum.hours=172

# Length of the time window when the sign-up confirmation token is active (in minutes)
cz.cuni.mff.xrg.odalic.users.signup.window.minutes=30

# Length of the time window when the password setting confirmation token is active (in minutes)
cz.cuni.mff.xrg.odalic.users.reset.window.minutes=30

# URL format for a sing-up confirmation.
cz.cuni.mff.xrg.odalic.users.signup.url=http://localhost/odalic#/signup/confirmation?token=%s

# URL format for a password setting confirmation.
cz.cuni.mff.xrg.odalic.users.reset.url=http://localhost/odalic#/reset/confirmation?token=%s

# Administrator's email (and the user ID)
cz.cuni.mff.xrg.odalic.users.admin.email=odalic@email.cz

# Administrator's initial password. It is recommended to change it using the standard means.
cz.cuni.mff.xrg.odalic.users.admin.password=cJJep2t4EYbf46PufyxFt9jX

##########
# TOKENS #
##########

# Issuer
cz.cuni.mff.xrg.odalic.tokens.issuer=Odalic

# Secret
cz.cuni.mff.xrg.odalic.tokens.secret=cPLsKpTZxAcDZH5cqg3bxAet3VdAJ683X8Ccu8yTyFh
